basePath: /gf/api
definitions:
  controller.CommunityInfo:
    properties:
      Create_Time:
        example: "2020-01-01"
        type: string
      Creator:
        example: test1
        type: string
      Description:
        example: this is a test community
        type: string
      Name:
        example: community1
        type: string
    type: object
  controller.CommunityResponseMsg:
    properties:
      code:
        example: 200
        type: integer
      data:
        $ref: '#/definitions/model.Community'
      message:
        example: process successfully
        type: string
    type: object
  controller.NewUserInfo:
    properties:
      Birthday:
        example: 2022-02-30
        type: string
      Department:
        example: CS:GO
        type: string
      Gender:
        example: male/female/unknown
        type: string
      Nickname:
        example: Peter Park
        type: string
      Username:
        example: jamesbond21
        type: string
    type: object
  controller.ResponseMsg:
    properties:
      code:
        example: 200
        type: integer
      message:
        example: process successfully
        type: string
    type: object
  controller.UserInfo:
    properties:
      ForAdmin:
        type: boolean
      NewPassword:
        example: 3ecb441b741bcd433288f5557e4b9118
        type: string
      Password:
        example: f9ae5f68ae1e7f7f3fc06053e9b9b539
        type: string
      Username:
        example: jamesbond21
        type: string
    type: object
  model.Community:
    properties:
      create_Time:
        example: "2020-01-01"
        type: string
      creator:
        type: string
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      num_Member:
        type: integer
    type: object
host: http://167.71.166.120:10010
info:
  contact: {}
  description: This is the Gator Forum Backend Server
  termsOfService: https://github.com/fongziyjun16/SE/tree/backend
  title: Gator Forum Backend API
  version: "1.0"
paths:
  /community/create:
    get:
      consumes:
      - application/json
      description: need strings community name
      parameters:
      - description: Create a new community needs Creator, Name & Description.
        in: body
        name: CommunityInfo
        required: true
        schema:
          $ref: '#/definitions/controller.CommunityInfo'
      produces:
      - application/json
      responses:
        "201":
          description: <b>Success</b>. Create Community Success
          schema:
            $ref: '#/definitions/controller.CommunityResponseMsg'
        "400":
          description: <b>Failure</b>. Bad Parameters or Community already exists
          schema:
            $ref: '#/definitions/controller.CommunityResponseMsg'
        "500":
          description: <b>Failure</b>. Server Internal Error.
          schema:
            $ref: '#/definitions/controller.CommunityResponseMsg'
      summary: Get the Community by Name
      tags:
      - Community Manage
    post:
      consumes:
      - application/json
      description: need strings creator & community name & description & create time
      parameters:
      - description: Create a new community needs Creator, Name & Description.
        in: body
        name: CommunityInfo
        required: true
        schema:
          $ref: '#/definitions/controller.CommunityInfo'
      produces:
      - application/json
      responses:
        "201":
          description: <b>Success</b>. Create Community Success
          schema:
            $ref: '#/definitions/controller.ResponseMsg'
        "400":
          description: <b>Failure</b>. Bad Parameters or Community already exists
          schema:
            $ref: '#/definitions/controller.ResponseMsg'
        "500":
          description: <b>Failure</b>. Server Internal Error.
          schema:
            $ref: '#/definitions/controller.ResponseMsg'
      summary: Create a new Community
      tags:
      - Community Manage
  /user/admin/delete:
    post:
      consumes:
      - application/json
      description: need strings username in post request, need token in cookie
      parameters:
      - description: username in post request body
        in: body
        name: username
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "201":
          description: <b>Success</b>. Update Password Successfully
          schema:
            $ref: '#/definitions/controller.ResponseMsg'
        "400":
          description: <b>Failure</b>. Bad Parameters
          schema:
            $ref: '#/definitions/controller.ResponseMsg'
        "500":
          description: <b>Failure</b>. Server Internal Error.
          schema:
            $ref: '#/definitions/controller.ResponseMsg'
      security:
      - ApiAuthToken: []
      summary: Admin delete Users, cannot self delete
      tags:
      - User Manage
  /user/admin/register:
    post:
      consumes:
      - application/json
      description: only need strings username & password & ForAdmin, need token in
        cookie
      parameters:
      - description: Admin User Register only needs Username, Password(encoded by
          md5) & ForAdmin with true.
        in: body
        name: UserInfo
        required: true
        schema:
          $ref: '#/definitions/controller.UserInfo'
      produces:
      - application/json
      responses:
        "201":
          description: <b>Success</b>. User Register Successfully
          schema:
            $ref: '#/definitions/controller.ResponseMsg'
        "400":
          description: <b>Failure</b>. Bad Parameters or User Has Existed
          schema:
            $ref: '#/definitions/controller.ResponseMsg'
        "500":
          description: <b>Failure</b>. Server Internal Error.
          schema:
            $ref: '#/definitions/controller.ResponseMsg'
      security:
      - ApiAuthToken: []
      summary: Register a new Admin User
      tags:
      - User Manage
  /user/follow:
    post:
      consumes:
      - application/json
      description: need token in cookie, need username who is followed
      parameters:
      - description: username in post request body
        in: body
        name: username
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "201":
          description: <b>Success</b>. Follow Successfully
          schema:
            $ref: '#/definitions/controller.ResponseMsg'
        "400":
          description: <b>Failure</b>. Bad Parameters or User not exist.
          schema:
            $ref: '#/definitions/controller.ResponseMsg'
        "500":
          description: <b>Failure</b>. Server Internal Error.
          schema:
            $ref: '#/definitions/controller.ResponseMsg'
      security:
      - ApiAuthToken: []
      summary: User Follow other users
      tags:
      - User Manage
  /user/login:
    post:
      consumes:
      - application/json
      description: only need strings username & password
      parameters:
      - description: only needs username and password
        in: body
        name: UserInfo
        required: true
        schema:
          $ref: '#/definitions/controller.UserInfo'
      produces:
      - application/json
      responses:
        "200":
          description: <b>Success</b>. User Login Successfully
          schema:
            $ref: '#/definitions/controller.ResponseMsg'
        "400":
          description: <b>Failure</b>. Bad Parameters or Username / Password incorrect
          schema:
            $ref: '#/definitions/controller.ResponseMsg'
        "500":
          description: <b>Failure</b>. Server Internal Error.
          schema:
            $ref: '#/definitions/controller.ResponseMsg'
      summary: Admin / Regular User login
      tags:
      - User Manage
  /user/logout:
    post:
      consumes:
      - application/json
      description: need strings username in post request, need token in cookie
      parameters:
      - description: username in post request body
        in: body
        name: username
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses: {}
      security:
      - ApiAuthToken: []
      summary: Admin / Regular User logout
      tags:
      - User Manage
  /user/password:
    post:
      consumes:
      - application/json
      description: need token in cookie, need Username, Password, NewPassword
      parameters:
      - description: need Username, Password, NewPassword
        in: body
        name: UserInfo
        required: true
        schema:
          $ref: '#/definitions/controller.UserInfo'
      produces:
      - application/json
      responses:
        "201":
          description: <b>Success</b>. Update Password Successfully
          schema:
            $ref: '#/definitions/controller.ResponseMsg'
        "400":
          description: <b>Failure</b>. Bad Parameters or Password not match
          schema:
            $ref: '#/definitions/controller.ResponseMsg'
        "500":
          description: <b>Failure</b>. Server Internal Error.
          schema:
            $ref: '#/definitions/controller.ResponseMsg'
      security:
      - ApiAuthToken: []
      summary: Admin & Regular Update Password
      tags:
      - User Manage
  /user/register:
    post:
      consumes:
      - application/json
      description: only need strings username & password
      parameters:
      - description: Regular User Register only needs Username, Password(encoded by
          md5) & ForAdmin with false.
        in: body
        name: UserInfo
        required: true
        schema:
          $ref: '#/definitions/controller.UserInfo'
      produces:
      - application/json
      responses:
        "201":
          description: <b>Success</b>. User Register Successfully
          schema:
            $ref: '#/definitions/controller.ResponseMsg'
        "400":
          description: <b>Failure</b>. Bad Parameters or User Has Existed
          schema:
            $ref: '#/definitions/controller.ResponseMsg'
        "500":
          description: <b>Failure</b>. Server Internal Error.
          schema:
            $ref: '#/definitions/controller.ResponseMsg'
      summary: Register a new Regular User
      tags:
      - User Manage
  /user/update:
    post:
      consumes:
      - application/json
      description: need token in cookie, need Nickname, Birthday(yyyy-mm-dd), Gender(male
        / female / unknown), Department
      parameters:
      - description: need Nickname, Birthday(yyyy-mm-dd), Gender(male / female / unknown),
          Department
        in: body
        name: NewUserInfo
        required: true
        schema:
          $ref: '#/definitions/controller.NewUserInfo'
      produces:
      - application/json
      responses:
        "201":
          description: <b>Success</b>. Update Password Successfully
          schema:
            $ref: '#/definitions/controller.ResponseMsg'
        "400":
          description: <b>Failure</b>. Bad Parameters
          schema:
            $ref: '#/definitions/controller.ResponseMsg'
        "500":
          description: <b>Failure</b>. Server Internal Error.
          schema:
            $ref: '#/definitions/controller.ResponseMsg'
      security:
      - ApiAuthToken: []
      summary: Update user information including Nickname, Birthday(yyyy-mm-dd), Gender(male
        / female / unknown), Department
      tags:
      - User Manage
securityDefinitions:
  ApiAuthToken:
    in: cookies
    name: token
    type: apiKey
swagger: "2.0"
